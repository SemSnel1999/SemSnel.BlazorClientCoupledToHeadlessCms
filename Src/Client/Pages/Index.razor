@page "/"
@page "/{*PageRoute}"
@using Client.CMS.Services
@using Client.Infrastructure.CMS.Wrappers
@using Client.CMS.Models.Content.Abstractions

@if (_isLoading)
{
    <p>loading...</p>
}
else
{
    @if (ContentWrapper is null)
    {
        <p>No content for page..</p>
    }
    else
    {
        <ContentPageTemplateSelector ContentWrapper="@ContentWrapper"></ContentPageTemplateSelector>
    }
}


@code {
    private bool _isLoading = false;
    
    [Inject] public PersistentComponentState PersistentComponentState { get; set; }

    private PersistingComponentStateSubscription _componentStateSubscription;

    [Parameter]
    public string PageRoute { get; set; } = "/";
    
    [Inject] 
    public ContentDeliveryService ContentDeliveryService { get; set; }
    
    public IContentWrapper ContentWrapper { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _componentStateSubscription = PersistentComponentState.RegisterOnPersisting(PersistContent);
    }

    private Task PersistContent()
    {
        PersistentComponentState.PersistAsJson(PageRoute, ContentWrapper);

        return Task.CompletedTask;
    }
    
    public void Dispose()
    {
        _componentStateSubscription.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;

        if (string.IsNullOrEmpty(PageRoute))
        {
            PageRoute = "index";
        }
        
        var isPeristed = PersistentComponentState.TryTakeFromJson<IContentWrapper>(PageRoute, out var restored);

        if (isPeristed)
        {
            ContentWrapper = restored;
        }
        else
        {
            ContentWrapper = await ContentDeliveryService.GetByUrl(PageRoute);
        }

        StateHasChanged();
        
        _isLoading = false;
    }
}